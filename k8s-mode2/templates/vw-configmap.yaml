apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "byconity.fullname" . }}-worker-run
  labels:
    {{- include "byconity.labels" . | nindent 4 }}
    byconity-role: worker
data:
  service: |
    [Unit]
    Description=ByConity Worker default (analytic DBMS for big data)
    Requires=network-online.target
    # NOTE: that After/Wants=time-sync.target is not enough, you need to ensure
    # that the time was adjusted already, if you use systemd-timesyncd you are
    # safe, but if you use ntp or some other daemon, you should configure it
    # additionaly.
    After=time-sync.target network-online.target
    Wants=time-sync.target

    [Service]
    Type=simple

    # NOTE: we leave clickhouse watchdog process enabled to be able to see OOM/SIGKILL traces in clickhouse-server.log files.
    # If you wish to disable the watchdog and rely on systemd logs just add "Environment=CLICKHOUSE_WATCHDOG_ENABLE=0" line.
    User=hdfs_user
    Group=hdfs_user
    Restart=always
    RestartSec=30
    ExecStart=${APP_ROOT}/bin/clickhouse server --config=/etc/byconity/worker.xml
    LimitCORE=infinity
    LimitNOFILE=500000
    CapabilityBoundingSet=CAP_NET_ADMIN CAP_IPC_LOCK CAP_SYS_NICE CAP_NET_BIND_SERVICE CAP_DAC_READ_SEARCH

    [Install]
    # ClickHouse should not start from the rescue shell (rescue.target).
    WantedBy=multi-user.target
  run: |
    #!/bin/bash
    chown root. /var/byconity /var/log/byconity
    exec "${APP_ROOT}/bin/clickhouse-server" --config "/etc/byconity/worker.yaml"

{{- range .Values.byconity.virtualWarehouses }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "byconity.fullname" $ }}-vw-{{ .name | replace "_" "-" }}-config
  labels:
    {{- include "byconity.labels" $ | nindent 4 }}
    byconity-role: worker
    byconity-vw: {{ .name }}
data:
  worker.yaml: |
    {{- $ports := dict "tcp_port" $.Values.byconity.ports.tcp "http_port" $.Values.byconity.ports.http "rpc_port" $.Values.byconity.ports.rpc "exchange_port" $.Values.byconity.ports.exchange "exchange_status_port" $.Values.byconity.ports.exchangeStatus }}
    {{- $server_service := dict "service" (printf "%s-%s" $.Release.Name "server") "headless_service" (printf "%s-%s-headless" $.Release.Name "server") "psm" (printf "%s-%s" $.Release.Name "server") }}
    {{- $tso_service := dict "service" (printf "%s-%s" $.Release.Name "tso") "headless_service" (printf "%s-%s-headless" $.Release.Name "tso") "psm" (printf "%s-%s" $.Release.Name "tso") }}
    {{- $dm_service := dict "service" (printf "%s-%s" $.Release.Name "daemon-manager") "headless_service" (printf "%s-%s-headless" $.Release.Name "daemon-manager") "psm" (printf "%s-%s" $.Release.Name "daemon-manager") }}
    {{- $rm_service := dict "service" (printf "%s-%s" $.Release.Name "resource-manager") "headless_service" (printf "%s-%s-headless" $.Release.Name "resource-manager") "psm" (printf "%s-%s" $.Release.Name "resource-manager") }}
    {{- $service_discovery := dict "service_discovery" (dict "server" $server_service "tso" $tso_service "daemon_manager" $dm_service "resource_manager" $rm_service) }}
    {{- $catalog := dict "catalog" (dict "name_space" (include "byconity.fullname" $)) }}
    {{- $hdfs_addr := dict "hdfs_addr" $.Values.byconity.hdfs_address }}
    {{- $.Files.Get "files/worker.yaml" | fromYaml | merge .configOverwrite $.Values.byconity.configOverwrite $hdfs_addr $catalog $service_discovery $ports | toYaml | nindent 4 }}
  users.yaml: |
    {{- $.Files.Get "files/users.yaml" | fromYaml | merge $.Values.byconity.usersOverwrite | toYaml | nindent 4 }}
  hdfs3.xml: |
    <configuration>
        {{- range $key, $val := $.Values.byconity.hdfs3Config }}
        <property>
            <name>{{ $key }}</name>
            <value>{{ $val }}</value>
        </property>
        {{- end }}
    </configuration>
  cnch-config.yaml: |
     {{- $ports := dict "tcp_port" $.Values.byconity.ports.tcp "http_port" $.Values.byconity.ports.http "rpc_port" $.Values.byconity.ports.rpc "exchange_port" $.Values.byconity.ports.exchange "exchange_status_port" $.Values.byconity.ports.exchangeStatus }}
     {{- $server_service := dict "service" (printf "%s-%s" $.Release.Name "server") "headless_service" (printf "%s-%s-headless" $.Release.Name "server") "psm" (printf "%s-%s" $.Release.Name "server") }}
     {{- $tso_service := dict "service" (printf "%s-%s" $.Release.Name "tso") "headless_service" (printf "%s-%s-headless" $.Release.Name "tso") "psm" (printf "%s-%s" $.Release.Name "tso") }}
     {{- $dm_service := dict "service" (printf "%s-%s" $.Release.Name "daemon-manager") "headless_service" (printf "%s-%s-headless" $.Release.Name "daemon-manager") "psm" (printf "%s-%s" $.Release.Name "daemon-manager") }}
     {{- $rm_service := dict "service" (printf "%s-%s" $.Release.Name "resource-manager") "headless_service" (printf "%s-%s-headless" $.Release.Name "resource-manager") "psm" (printf "%s-%s" $.Release.Name "resource-manager") }}
     {{- $service_discovery := dict "service_discovery" (dict "server" $server_service "tso" $tso_service "daemon_manager" $dm_service "resource_manager" $rm_service) }}
     {{- $catalog := dict "catalog" (dict "name_space" (include "byconity.fullname" $)) }}
     {{- $hdfs_addr_dict := dict "hdfs_addr" $.Values.byconity.hdfs_address }}
     {{- $hdfs_ha_nameservice_dict := dict "hdfs_ha_nameservice" $.Values.byconity.hdfs_ha_nameservice }}
     {{- $hdfs_addr := (empty $.Values.byconity.hdfs_ha_nameservice | ternary $hdfs_addr_dict $hdfs_ha_nameservice_dict) }}
     {{- $.Files.Get "files/cnch-config.yaml" | fromYaml | merge .configOverwrite $hdfs_addr $catalog $service_discovery $ports | toYaml | nindent 4 }}
{{- end }}
